# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.4dm'
'name': '4dm'
'type': 'tree-sitter'
'parser': 'tree-sitter-4dm'

'fileTypes': [
  '4dm'
]

'comments':
  'start': '/*'
  'end': '*/'

'folds': [
  {
    'type': ['for_each_block']
    'start': {'type': 'for_each'}
    'end': {'type': 'end_for_each'}
  }

  {
    'type': ['while_block']
    'start': {'type': 'while'}
    'end': {'type': 'end_while'}
  }

  {
    'type': ['repeat_block']
    'start': {'type': 'repeat'}
    'end': {'type': 'until'}
  }

  {
    'type': ['if_block']
    'start': {'type': ['end_if', 'if']}
    'end': {'type': ['else', 'end_if']}
  }

  {
    'type': ['for_block']
    'start': {'type': 'for'}
    'end': {'type': 'end_for'}
  }

  {
    'type': ['sql_block']
    'start': {'type': 'begin_sql'}
    'end': {'type': 'end_sql'}
  }

  {
    'type': ['use_block']
    'start': {'type': 'use'}
    'end': {'type': 'end_use'}
  }

  {
    'type': ['case_block']
    'start': {'type': ['":"', 'else', 'case_of']}
    'end': {'type': ['":"', 'else', 'end_case']}
  }
]

'scopes':

  '''
  comment
  ''' : 'comment.block'

  '''
  parameter
  ''' : 'constant.other.parameter'

  '''
  process_variable
  ''' : 'entity.name.variable.process'

  '''
  local_variable
  ''' : 'entity.name.variable.local'

  '''
  interprocess_variable
  ''' : 'entity.name.variable.global'

  '''
  table
  ''' : 'support.storage.table'

  '''
  field
  ''' : 'support.storage.field'

  '''
  number
  ''' : 'constant.numeric'

  '''
  date
  ''' : 'constant.date'

  '''
  time
  ''' : 'constant.time'

  '''
  string
  ''' : 'string.quoted.double'

  '''
  command
  ''' : 'constant.language.command'

  '''
  function
  ''' : 'entity.name.function'

  'command': [
    {match: /[cC][_][vV][aA][rR][iI][aA][nN][tT](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][oO][bB][jJ][eE][cC][tT](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][cC][oO][lL][lL][eE][cC][tT][iI][oO][nN](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][pP][oO][iI][nN][tT][eE][rR](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][pP][iI][cC][tT][uU][rR][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][bB][oO][oO][lL][eE][aA][nN](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][lL][oO][nN][gG][iI][nN][tT](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][bB][lL][oO][bB](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][dD][aA][tT][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][rR][eE][aA][lL](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][tT][eE][xX][tT](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][tT][iI][mM][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][oO][bB][jJ][eE][tT](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][pP][oO][iI][nN][tT][eE][uU][rR](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][iI][mM][aA][gG][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][bB][oO][oO][lL][eE][eE][nN](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][eE][nN][tT][iI][eE][rR][_][lL][oO][nN][gG](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][rR][eE][eE][lL](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][tT][eE][xX][tT][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[cC][_][hH][eE][uU][rR][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[_][oO][_][cC][_][gG][rR][aA][pP][hH](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[_][oO][_][cC][_][sS][tT][rR][iI][nN][gG](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[_][oO][_][cC][_][iI][nN][tT][eE][gG][eE][rR](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[_][oO][_][cC][_][gG][rR][aA][pP][hH][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[_][oO][_][cC][_][aA][lL][pP][hH][aA](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[_][oO][_][cC][_][eE][nN][tT][iI][eE][rR](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[aA][rR][rR][aA][yY] [oO][bB][jJ][eE][cC][tT](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[aA][rR][rR][aA][yY] [pP][oO][iI][nN][tT][eE][rR](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[aA][rR][rR][aA][yY] [pP][iI][cC][tT][uU][rR][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[aA][rR][rR][aA][yY] [bB][oO][oO][lL][eE][aA][nN](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[aA][rR][rR][aA][yY] [lL][oO][nN][gG][iI][nN][tT](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[aA][rR][rR][aA][yY] [iI][nN][tT][eE][gG][eE][rR](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[aA][rR][rR][aA][yY] [bB][lL][oO][bB](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[aA][rR][rR][aA][yY] [dD][aA][tT][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[aA][rR][rR][aA][yY] [tT][iI][mM][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[aA][rR][rR][aA][yY] [rR][eE][aA][lL](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[aA][rR][rR][aA][yY] [tT][eE][xX][tT](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[tT][aA][bB][lL][eE][aA][uU] [oO][bB][jJ][eE][tT](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[tT][aA][bB][lL][eE][aA][uU] [pP][oO][iI][nN][tT][eE][uU][rR](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[tT][aA][bB][lL][eE][aA][uU] [iI][mM][aA][gG][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[tT][aA][bB][lL][eE][aA][uU] [bB][oO][oO][lL][eE][eE][nN](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[tT][aA][bB][lL][eE][aA][uU] [eE][nN][tT][iI][eE][rR] [lL][oO][nN][gG](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[tT][aA][bB][lL][eE][aA][uU] [rR][eE][eE][lL](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[tT][aA][bB][lL][eE][aA][uU] [bB][lL][oO][bB](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[tT][aA][bB][lL][eE][aA][uU] [dD][aA][tT][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[tT][aA][bB][lL][eE][aA][uU] [tT][eE][xX][tT][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[tT][aA][bB][lL][eE][aA][uU] [eE][nN][tT][iI][eE][rR](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[tT][aA][bB][lL][eE][aA][uU] [hH][eE][uU][rR][eE](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[_][oO][_][tT][aA][bB][lL][eE][aA][uU] [aA][lL][pP][hH][aA](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
    {match: /[_][oO][_][aA][rR][rR][aA][yY] [sS][tT][rR][iI][nN][gG](:[cC][0-9]+)?/, scopes: 'support.storage.type'}
  ]

  '''
  while,
  until,
  for_each,
  end_for_each,
  for,
  end_for,
  use,
  end_use,
  repeat,
  end_while,
  if,
  else,
  end_if,
  case_of,
  end_case,
  begin_sql,
  end_sql
  ''' : 'keyword.control'
